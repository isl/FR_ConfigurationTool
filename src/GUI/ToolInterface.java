/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JFrame.java
 *
 * Created on 5  2011, 4:26:12 μμ
 */
package GUI;

import PathValidator.All_Classes_Disjointness_List;
import PathValidator.All_Classes_Multinstantiation_List;
import PathValidator.DisjointnessTreat;
import PathValidator.InvokeRDFQueryGeneration;
import PathValidator.Multi_InstantiationTreat;
import PathValidator.Validator;
import RepoEdit.MRepositoryManager;
import config.SparqlConfig;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.openrdf.query.MalformedQueryException;
import org.openrdf.query.QueryEvaluationException;
import org.openrdf.query.TupleQueryResultHandlerException;
import org.openrdf.repository.RepositoryException;
import schemacoveragechecker.SchemaCoverageChecker;
import subrelationshipsfinder.FundamentalCategories.Category;
import subrelationshipsfinder.SubRelationshipsFinder;
import tools.FileReader;
import tools.WriteFile;
import javax.swing.JFrame;
import rulesUpdate.FindsubpathsEqualToRules;

/** This is the interface of the tool. 
 *
 * @author Christos,Katerina
 */
public class ToolInterface extends javax.swing.JFrame {

    public static String server;
    public static String repository;
    JFileChooser fc;
    public MRepositoryManager mrm = null;
    public static String userDefinedName = "";
    //the domain of the current FR
    public static Category domain;
    //the range of the current FR
    public static Category range;
    public static All_Classes_Multinstantiation_List multiClassList;
    public static All_Classes_Disjointness_List disjointClassList;
    //the multi-instantiation and disjointness classes are defined in respective files,
    //the location of which is kept in the set up folder
    public static String disjointPath = System.getProperty("user.dir") + System.getProperty("file.separator")
            + "Disjoint_classes.conf";
    public static String multiInstantPath = System.getProperty("user.dir") + System.getProperty("file.separator")
            + "Multi_Instantiation_classes.conf";
    //this variable indicates what was previously pressed by the user
    private String lastChoice = "";
    private String relName = "";
    Thread thr1;

    /** Creates new form JFrame */
    public ToolInterface() {
        initComponents();
        fc = new JFileChooser();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jProgressBar1 = new javax.swing.JProgressBar();
        CancelButtonJdialog1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        InputTextField = new javax.swing.JTextField();
        ValidateButton = new javax.swing.JButton();
        SubPropertyButton = new javax.swing.JButton();
        SPARQLButton1 = new javax.swing.JButton();
        IVBTemplateButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        OutputTextArea = new javax.swing.JTextArea();
        OutputLabel = new javax.swing.JLabel();
        ClearButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        LoadFromFile_MenuItem = new javax.swing.JMenuItem();
        Save_MenuItem1 = new javax.swing.JMenuItem();
        Exit_MenuItem = new javax.swing.JMenuItem();
        SpecialCasesJMenu = new javax.swing.JMenu();
        MultiInstantMenuItem2 = new javax.swing.JMenuItem();
        Disjoint_MenuItem1 = new javax.swing.JMenuItem();
        MultiInstant2MenuItem = new javax.swing.JMenuItem();
        Disjoint2MenuItem = new javax.swing.JMenuItem();
        GeneralActionsMenu = new javax.swing.JMenu();
        CheckCoverageMenuItem1 = new javax.swing.JMenuItem();
        NewRulesjMenuItem1 = new javax.swing.JMenuItem();

        jDialog1.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        jDialog1.setTitle("Please wait...(~5mins)");
        jDialog1.setAlwaysOnTop(true);
        jDialog1.setBackground(new java.awt.Color(255, 153, 51));
        jDialog1.setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        jDialog1.setMinimumSize(new java.awt.Dimension(200, 91));
        jDialog1.setResizable(false);
        jDialog1.addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
                jDialog1WindowLostFocus(evt);
            }
        });
        jDialog1.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                jDialog1WindowClosed(evt);
            }
        });

        jProgressBar1.setForeground(new java.awt.Color(255, 153, 0));

        CancelButtonJdialog1.setText("Cancel");
        CancelButtonJdialog1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelButtonJdialog1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jDialog1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jDialog1Layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(CancelButtonJdialog1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addComponent(CancelButtonJdialog1)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Fundamental Relationships configuration tool");
        setBackground(new java.awt.Color(100, 100, 100));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Query Path"));

        InputTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InputTextFieldActionPerformed(evt);
            }
        });
        jScrollPane2.setViewportView(InputTextField);

        ValidateButton.setText("Validate");
        ValidateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ValidateButtonActionPerformed(evt);
            }
        });

        SubPropertyButton.setText("Check SubRelationship");
        SubPropertyButton.setEnabled(false);
        SubPropertyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubPropertyButtonActionPerformed(evt);
            }
        });

        SPARQLButton1.setText("SPARQL");
        SPARQLButton1.setEnabled(false);
        SPARQLButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SPARQLButton1ActionPerformed(evt);
            }
        });

        IVBTemplateButton.setText("IVBTemplate");
        IVBTemplateButton.setEnabled(false);
        IVBTemplateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IVBTemplateButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 651, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(ValidateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SubPropertyButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SPARQLButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(IVBTemplateButton)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ValidateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(SubPropertyButton)
                    .addComponent(SPARQLButton1)
                    .addComponent(IVBTemplateButton)))
        );

        SubPropertyButton.getAccessibleContext().setAccessibleName("CheckSub");

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Results"));
        jPanel2.setForeground(new java.awt.Color(100, 100, 100));

        OutputTextArea.setColumns(20);
        OutputTextArea.setRows(5);
        jScrollPane1.setViewportView(OutputTextArea);

        OutputLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        ClearButton.setText("Clear");
        ClearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ClearButton)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 651, Short.MAX_VALUE)
                    .addComponent(OutputLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 651, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(OutputLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ClearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jMenu1.setText("File");

        LoadFromFile_MenuItem.setText("Load Paths' File");
        LoadFromFile_MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadFromFile_MenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(LoadFromFile_MenuItem);

        Save_MenuItem1.setText("Save");
        Save_MenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Save_MenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(Save_MenuItem1);

        Exit_MenuItem.setText("Exit");
        Exit_MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Exit_MenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(Exit_MenuItem);

        jMenuBar1.add(jMenu1);

        SpecialCasesJMenu.setText("Special Cases");

        MultiInstantMenuItem2.setText("Add Multiple Instantiation case");
        MultiInstantMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MultiInstantMenuItem2ActionPerformed(evt);
            }
        });
        SpecialCasesJMenu.add(MultiInstantMenuItem2);

        Disjoint_MenuItem1.setText("Add Disjointness case");
        Disjoint_MenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Disjoint_MenuItem1ActionPerformed(evt);
            }
        });
        SpecialCasesJMenu.add(Disjoint_MenuItem1);

        MultiInstant2MenuItem.setText("Remove Multiple Instantiation case");
        MultiInstant2MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MultiInstant2MenuItemActionPerformed(evt);
            }
        });
        SpecialCasesJMenu.add(MultiInstant2MenuItem);

        Disjoint2MenuItem.setText("Remove Disjointness case");
        Disjoint2MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Disjoint2MenuItemActionPerformed(evt);
            }
        });
        SpecialCasesJMenu.add(Disjoint2MenuItem);

        jMenuBar1.add(SpecialCasesJMenu);

        GeneralActionsMenu.setText("General Actions");

        CheckCoverageMenuItem1.setText("Check Schema Coverage");
        CheckCoverageMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckCoverageMenuItem1ActionPerformed(evt);
            }
        });
        GeneralActionsMenu.add(CheckCoverageMenuItem1);

        NewRulesjMenuItem1.setText("Check for new rules");
        NewRulesjMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewRulesjMenuItem1ActionPerformed(evt);
            }
        });
        GeneralActionsMenu.add(NewRulesjMenuItem1);

        jMenuBar1.add(GeneralActionsMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * This method is the action performed when the validate button is pressed.
     * Firstly the text areas are cleaned form previous outputs and then the user defined
     * path is validated for correctness.
     * @param evt 
     */
    private void ValidateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ValidateButtonActionPerformed

        // Clear the previous outputs
        OutputLabel.setText("");
        OutputTextArea.setText("");


        // Parse the input string from the text field
        String inputStr = InputTextField.getText();


        try {

            String dir = "src/results";


            File InLstFile = new File("./src/results/IntendedList.txt");
            File OutFile = new File("./src/results/OUTPUT");
            File RESFile = new File("./src/results/RESULTS.xml");
            boolean existInLst = InLstFile.exists();
            boolean existOut = OutFile.exists();
            boolean existRES = RESFile.exists();

            /* Check if the files already exist. If there are exist,first delete 
             * them and then create new ones.
             */
            if (!existInLst && !existOut && !existRES) {
                new File(dir).mkdirs();
                InLstFile.createNewFile();
                OutFile.createNewFile();
                RESFile.createNewFile();
            } else {
                InLstFile.delete();
                OutFile.delete();
                RESFile.delete();

                InLstFile.createNewFile();
                OutFile.createNewFile();
                RESFile.createNewFile();
            }

            // create the objects for multiple-instantiation and disjointess 
            //in order to use them for validation
            multiClassList = new All_Classes_Multinstantiation_List();
            multiClassList.createList();
            disjointClassList = new All_Classes_Disjointness_List();
            disjointClassList.createList();

            ArrayList validList = Validator.validate(inputStr, mrm, multiClassList.list, disjointClassList.list);
            boolean valid = (Boolean) validList.get(0);




//*****Domain and range are set in the PathToIVBTemplate (PathValidator Package) ************
            //if the provided path is valid then enable the SPARQL button
            String output = output = FileReader.read_from_file("./src/results/OUTPUT");
            String IndentedList = FileReader.read_from_file("./src/results/IntendedList.txt");
            if (valid) {
                domain = (Category) validList.get(1);
                range = (Category) validList.get(2);
                OutputLabel.setText(output);
                OutputTextArea.setText(IndentedList);
                SubPropertyButton.setEnabled(true);
                SPARQLButton1.setEnabled(true);
                IVBTemplateButton.setEnabled(true);
                lastChoice = "relationship";
            } else {
                OutputLabel.setText("Validation Error!");
                OutputTextArea.setText(output);
            }

        } catch (RepositoryException ex) {
            Logger.getLogger(ToolInterface.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ToolInterface.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(ToolInterface.class.getName()).log(Level.SEVERE, null, ex);
        }





    }//GEN-LAST:event_ValidateButtonActionPerformed

    private void InputTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InputTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_InputTextFieldActionPerformed
    /**
     * With this method we clear the output and input fields from remaining text.
     * @param evt 
     */
    private void ClearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearButtonActionPerformed
        // TODO add your handling code here:
        InputTextField.setText("");
        OutputLabel.setText("");
        OutputTextArea.setText(" ");
        SubPropertyButton.setEnabled(false);
        SPARQLButton1.setEnabled(false);
        IVBTemplateButton.setEnabled(false);
        lastChoice = "";
    }//GEN-LAST:event_ClearButtonActionPerformed

    private void Exit_MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Exit_MenuItemActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_Exit_MenuItemActionPerformed

    /**
     * This method is used in order to load a path from a file
     * @param evt 
     */
    private void LoadFromFile_MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadFromFile_MenuItemActionPerformed
        int returnVal = fc.showOpenDialog(ToolInterface.this);
        File file = fc.getSelectedFile();
        System.out.println(file.getAbsolutePath());
        String query = FileReader.read_from_file(file.getAbsolutePath());
        InputTextField.setText(query);
    }//GEN-LAST:event_LoadFromFile_MenuItemActionPerformed
    /**
     * Takes the input path and checks if it is sub-relationship of any other
     * @param evt 
     */
    private void SubPropertyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubPropertyButtonActionPerformed

        String inputStr = InputTextField.getText();
        String subrel = SubRelationshipsFinder.subRelFind(inputStr, mrm);
        OutputLabel.setText("SubRelationship of :");
        OutputTextArea.setText(subrel);
        lastChoice = "subRelationship";
        //*****Domain and range are set in the SubRelationshipsFinder ************

    }//GEN-LAST:event_SubPropertyButtonActionPerformed
    /**
     * This method invokes the transformation of the path to SPARQL
     * @param evt 
     */
    private void SPARQLButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SPARQLButton1ActionPerformed

        String inputStr = InputTextField.getText();
        String sparql = InvokeRDFQueryGeneration.QueryGen(inputStr, "sparql", mrm, "");
        OutputLabel.setText("SPARQL");
        OutputTextArea.setText(sparql);
        lastChoice = "sparql";
        //*****Domain and range are set in the InvokeRDFQueryGeneration ************

    }//GEN-LAST:event_SPARQLButton1ActionPerformed

    /**
     * This method checks the coverage of the CIDOC-CRM schema by the FRs
     * @param evt 
     */
private void CheckCoverageMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckCoverageMenuItem1ActionPerformed

    JFrame frame = new JFrame();
    frame.setSize(1000, 1000);
    JOptionPane.showMessageDialog(frame, "This process will take a little time, so be patient :) ");
    String uncovered = SchemaCoverageChecker.checkShemaCoverage(mrm);
    OutputLabel.setText("Check performed!");
    OutputTextArea.setText(uncovered);
}//GEN-LAST:event_CheckCoverageMenuItem1ActionPerformed

private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

    JFrame frame = new JFrame();
    frame.setSize(1000, 1000);
    CustomDialog customDialog = new CustomDialog(frame, null, "repository");
    customDialog.pack();
    customDialog.setLocationRelativeTo(frame);
    customDialog.setVisible(true);

    String s = customDialog.getValidatedText();
    if (s != null) {

        //perform a query on the repository specified in order to check its response
        String testquery =  "ASK {<a:res> <b:res> <c:res>}"; //updated by Anastasia
        try {
            //create repository manager
            mrm = new MRepositoryManager(server, repository);
            mrm.runSPARQL2XMLStream(testquery);

            //The text is valid.
            System.out.println("Congratulations!  "
                    + "You entered \""
                    + s
                    + "\".");
        } catch (RepositoryException ex) {
            ex.printStackTrace();
        } catch (MalformedQueryException ex) {
            ex.printStackTrace();
        } catch (QueryEvaluationException ex) {
            ex.printStackTrace();
            boolean ok;
            do {
                ok = treatRepositoryException(frame, testquery);
            } while (!ok);


        } catch (TupleQueryResultHandlerException ex) {
            ex.printStackTrace();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

}//GEN-LAST:event_formWindowOpened
/**
 * Invokes the IVB template creation
 * @param evt 
 */
private void IVBTemplateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IVBTemplateButtonActionPerformed
    // try {

    String inputStr = InputTextField.getText();
    JFrame frame = new JFrame();
    frame.setSize(1000, 1000);
    String message = "Please give the FR name \n";
    CustomDialog customDialog = new CustomDialog(frame, message, "templateCreation");
    customDialog.pack();
    customDialog.setLocationRelativeTo(frame);
    customDialog.setVisible(true);
    String s = customDialog.getValidatedText();
    relName = s.replaceAll(" ", "");

    String template = InvokeRDFQueryGeneration.QueryGen(inputStr, "IVBtemplate", mrm, s);
    OutputLabel.setText("IVBTemplate");
    OutputTextArea.setText(template);
    lastChoice = "template";
}//GEN-LAST:event_IVBTemplateButtonActionPerformed

    private void Save_MenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Save_MenuItem1ActionPerformed
        openWindowForSave();
    }//GEN-LAST:event_Save_MenuItem1ActionPerformed
/**
     * Used to add a new multi-instantiation case
     * @param evt 
     */
private void MultiInstantMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MultiInstantMenuItem2ActionPerformed
    JFrame frame = new JFrame();

    frame.setSize(1000, 1000);
    String message = "Please give the multi instantiation classes, under the format \"A:B\"\n"
            + "Note: A:B means that B can be used in the place of A.";
    CustomDialog customDialog = new CustomDialog(frame, message, "multi");
    customDialog.pack();
    customDialog.setLocationRelativeTo(frame);
    customDialog.setVisible(true);
    String s = customDialog.getValidatedText();
    String firstClass = s.split(":")[0];
    String secondClass = s.split(":")[1];
    Multi_InstantiationTreat multiTreat = new Multi_InstantiationTreat();
    String treatmulti = multiTreat.checkExistenceInMulti(firstClass, secondClass, s, "add");

    if (!treatmulti.equalsIgnoreCase("success")) {

        JOptionPane.showMessageDialog(frame, treatmulti);

    } else {
        JOptionPane.showMessageDialog(frame, "Multi-instantiation case added successfully!");
        ToolInterface.multiClassList = new All_Classes_Multinstantiation_List();
        ToolInterface.multiClassList.createList();

    }
}//GEN-LAST:event_MultiInstantMenuItem2ActionPerformed

/**
 * Used to add a new disjointness case
 * @param evt 
 */
private void Disjoint_MenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Disjoint_MenuItem1ActionPerformed
    JFrame frame = new JFrame();

    frame.setSize(1000, 1000);
    String message = "Please give the disjoint classes, under the format \"A:B\"\n"
            + "Note: A:B means that A cannot be used in the place of B.";
    CustomDialog customDialog = new CustomDialog(frame, message, "disjoint");
    customDialog.pack();
    customDialog.setLocationRelativeTo(frame);
    customDialog.setVisible(true);
    String s = customDialog.getValidatedText();
    String firstClass = s.split(":")[0];
    String secondClass = s.split(":")[1];
    DisjointnessTreat disjTreat = new DisjointnessTreat();
    String treatDisjointness = disjTreat.checkExistenceInDisjoint(firstClass, secondClass, s, "add");

    if (!treatDisjointness.equalsIgnoreCase("success")) {

        JOptionPane.showMessageDialog(frame, treatDisjointness);

    } else {
        JOptionPane.showMessageDialog(frame, "Disjoint case added successfully!");
        ToolInterface.disjointClassList = new All_Classes_Disjointness_List();
        ToolInterface.disjointClassList.createList();

    }
}//GEN-LAST:event_Disjoint_MenuItem1ActionPerformed
/**
 * Used to remove a  multi-instantiation case
 * @param evt 
 */
    private void MultiInstant2MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MultiInstant2MenuItemActionPerformed
        JFrame frame = new JFrame();

        frame.setSize(1000, 1000);
        String message = "Please give the multi instantiation case you wish to discontinue, under the format \"A:B\"\n"
                + "Note: A:B means that B can be used in the place of A.";
        CustomDialog customDialog = new CustomDialog(frame, message, "multi");
        customDialog.pack();
        customDialog.setLocationRelativeTo(frame);
        customDialog.setVisible(true);
        String s = customDialog.getValidatedText();
        String firstClass = s.split(":")[0];
        String secondClass = s.split(":")[1];
        Multi_InstantiationTreat multiTreat = new Multi_InstantiationTreat();
        String treatmulti = multiTreat.checkExistenceInMulti(firstClass, secondClass, s, "remove");


        if (!treatmulti.equalsIgnoreCase("success")) {

            JOptionPane.showMessageDialog(frame, treatmulti);

        } else {
            JOptionPane.showMessageDialog(frame, "Multi-instantiation case removed successfully!");
            ToolInterface.multiClassList = new All_Classes_Multinstantiation_List();
            ToolInterface.multiClassList.createList();

        }
    }//GEN-LAST:event_MultiInstant2MenuItemActionPerformed
/**
     * Used to remove a disjointness case
     * @param evt 
     */
    private void Disjoint2MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Disjoint2MenuItemActionPerformed
        JFrame frame = new JFrame();

        frame.setSize(1000, 1000);
        String message = "Please give the disjoint case you wish to discontinue, under the format \"A:B\"\n"
                + "Note: A:B means that A cannot be used in the place of B.";
        CustomDialog customDialog = new CustomDialog(frame, message, "disjoint");
        customDialog.pack();
        customDialog.setLocationRelativeTo(frame);
        customDialog.setVisible(true);
        String s = customDialog.getValidatedText();
        String firstClass = s.split(":")[0];
        String secondClass = s.split(":")[1];
        DisjointnessTreat disjTreat = new DisjointnessTreat();
        String treatDisjointness = disjTreat.checkExistenceInDisjoint(firstClass, secondClass, s, "remove");


        if (!treatDisjointness.equalsIgnoreCase("success")) {

            JOptionPane.showMessageDialog(frame, treatDisjointness);

        } else {
            JOptionPane.showMessageDialog(frame, "Disjoint case removed successfully!");
            ToolInterface.disjointClassList = new All_Classes_Disjointness_List();
            ToolInterface.disjointClassList.createList();

        }
    }//GEN-LAST:event_Disjoint2MenuItemActionPerformed

    private void NewRulesjMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewRulesjMenuItem1ActionPerformed

        JFrame frame = new JFrame();
        frame.setSize(1000, 1000);
        JOptionPane.showMessageDialog(frame, "This process will take a little time, so be patient :) ");
        OutputLabel.setText("This process will take a long time, so be patient :) ");

        this.setEnabled(false);
        jProgressBar1.setIndeterminate(true);
        jDialog1.setVisible(true);
        thr1 = new Thread(changesStatusThread);
        thr1.start();

    }//GEN-LAST:event_NewRulesjMenuItem1ActionPerformed

    private void CancelButtonJdialog1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelButtonJdialog1ActionPerformed
        // TODO add your handling code here:

        thr1.stop();
        jDialog1.setVisible(false);
        this.setEnabled(true);
        this.setFocusable(true);
    }//GEN-LAST:event_CancelButtonJdialog1ActionPerformed

    private void jDialog1WindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_jDialog1WindowClosed
    }//GEN-LAST:event_jDialog1WindowClosed

    private void jDialog1WindowLostFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_jDialog1WindowLostFocus
        this.setEnabled(true);
        this.setVisible(true);
    }//GEN-LAST:event_jDialog1WindowLostFocus
    Runnable changesStatusThread = new Runnable() {

        public void run() {
            try {
                String rulesReplacementProposals = FindsubpathsEqualToRules.findRulesInFRs(mrm);

                OutputLabel.setText("Check performed!");
                OutputTextArea.setText(rulesReplacementProposals);
                jDialog1.setVisible(false);

            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    };

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ToolInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ToolInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ToolInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ToolInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new ToolInterface().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CancelButtonJdialog1;
    private javax.swing.JMenuItem CheckCoverageMenuItem1;
    private javax.swing.JButton ClearButton;
    private javax.swing.JMenuItem Disjoint2MenuItem;
    private javax.swing.JMenuItem Disjoint_MenuItem1;
    private javax.swing.JMenuItem Exit_MenuItem;
    private javax.swing.JMenu GeneralActionsMenu;
    private javax.swing.JButton IVBTemplateButton;
    private javax.swing.JTextField InputTextField;
    private javax.swing.JMenuItem LoadFromFile_MenuItem;
    private javax.swing.JMenuItem MultiInstant2MenuItem;
    private javax.swing.JMenuItem MultiInstantMenuItem2;
    private javax.swing.JMenuItem NewRulesjMenuItem1;
    private javax.swing.JLabel OutputLabel;
    private javax.swing.JTextArea OutputTextArea;
    private javax.swing.JButton SPARQLButton1;
    private javax.swing.JMenuItem Save_MenuItem1;
    private javax.swing.JMenu SpecialCasesJMenu;
    private javax.swing.JButton SubPropertyButton;
    private javax.swing.JButton ValidateButton;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

    private boolean treatRepositoryException(JFrame frame, String testquery) {
        try {
            String message = "No such repository!  Try again ";
            CustomDialog customDialog = new CustomDialog(frame, message, "Repository");
            customDialog.pack();
            customDialog.setLocationRelativeTo(frame);
            customDialog.setVisible(true);
            String s = customDialog.getValidatedText();
            //this is set to true to prevent that in case the user press cancel 
            //or X there will be an never ending loop requesting for valid repository
            if (s == null) {
                return true;
            }
            mrm = new MRepositoryManager(server, repository);
            mrm.runSPARQL2AskBoolean(testquery);


        } catch (MalformedQueryException ex) {
            ex.printStackTrace();
        } catch (QueryEvaluationException ex) {
            ex.printStackTrace();
            return false;

        } catch (TupleQueryResultHandlerException ex) {
            ex.printStackTrace();
        } catch (Exception ex) {
            ex.printStackTrace();
            return false;
        }
        return true;
    }

    private String treatFileExistence(JFrame frame, String filename) {
        String message = "File already exists.Do you want to replace it? ";
        CustomDialog customDialog = new CustomDialog(frame, message, "FileExistence");
        customDialog.pack();
        customDialog.setLocationRelativeTo(frame);
        customDialog.setVisible(true);
        String s = customDialog.getValidatedText();
        customDialog.setVisible(false);
        if (s != null && s.equalsIgnoreCase("yes")) {
            return s;
        } else {
            //distinguish the case for template, since the user must recreate the template
            //in order to save it!
            if (lastChoice.equalsIgnoreCase("template")) {
                message = "If you wish to save this IVBtemplate,"
                        + " \n recreate it providing a different FR name!";
                JOptionPane.showMessageDialog(frame, message);
            } else {
                openWindowForSave();
            }
        }
        return "";
    }

    private void openWindowForSave() {


        JFrame frame = new JFrame();

        frame.setSize(1000, 1000);
        String s;
        //if the lastChois is Template this means the user has already provided a name for the
        //FR, so no need to ask again
        if (!lastChoice.equalsIgnoreCase("template")) {
            String message = "Please give the FR name \n(no spaces allowed)";
            CustomDialog customDialog = new CustomDialog(frame, message, "save");
            customDialog.pack();
            customDialog.setLocationRelativeTo(frame);
            customDialog.setVisible(true);
            s = customDialog.getValidatedText();

        } else {
            if (relName != null) {
                s = relName.replaceAll(" ", "");
            } else {
                s = relName;
            }
        }
        if (s == null) {
            JOptionPane.showMessageDialog(frame, "There is no FR name provided for this IVBtemplate!\n "
                    + "Please recreate the template providing a valid name for it!");
            return;
        }

        String inputStr = OutputTextArea.getText();
        ArrayList<String> results = WriteFile.saveFileFromInterface(domain, range, s, inputStr, lastChoice, false);
        String result = results.get(0);
        String filename = results.get(1);
        if (result.equalsIgnoreCase("exists")) {
            result = treatFileExistence(frame, filename);
            if (result.equalsIgnoreCase("yes")) {
                ArrayList<String> results2 = WriteFile.saveFileFromInterface(domain, range, s, inputStr, lastChoice, true);
                String result2 = results2.get(0);
                String filename2 = results2.get(1);
                if (result2.equalsIgnoreCase("success")) {
                    JOptionPane.showMessageDialog(frame, "File saved at: \n" + filename2);
                } else {
                    JOptionPane.showMessageDialog(frame, result2);
                }

            } else {
                return;
            }
        } else if (result.equalsIgnoreCase("success")) {
            JOptionPane.showMessageDialog(frame, "File saved at: " + filename);
        } else {
            JOptionPane.showMessageDialog(frame, result);
        }

    }
}
